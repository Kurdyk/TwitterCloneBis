@page "/user/{username}"
@using global::WebTest.Models
@model UserProfile;

@{
    ViewData["title"] = @Model.User.Username;
}

<script>

    function submitFollow() {
        const submit_follow_action = async () => {
            var target_url = "/follow/" + @Model.User.Username;
            console.log(target_url)
            const request = await fetch(target_url, {
                "method": "POST",
            });
            if (request.redirected) {
                window.location = request.url;
            }
            if (request.status !== 200) {
                return;
            }
            document.getElementById('followButton').innerHTML = 'Unfollow';
            document.getElementById('followButton').innerText = 'Unfollow';
            document.getElementById('followButton').textContent = 'Unfollow';
            document.getElementById('followButton').style.background = "red";
            document.getElementById('followButton').onclick = submitUnfollow;
        };
        submit_follow_action.call();
    }

    function submitUnfollow() {
        const submit_unfollow_action = async () => {
            var target_url = "/follow/" + @Model.User.Username;
            console.log(target_url)
            const request = await fetch(target_url, {
                "method": "DELETE",
            });
            if (request.redirected) {
                window.location = request.url;
            }
            if (request.status !== 200) {
                return;
            }
            document.getElementById('followButton').innerHTML = 'Follow';
            document.getElementById('followButton').innerText = 'Follow';
            document.getElementById('followButton').textContent = 'Follow';
            document.getElementById('followButton').style.background = "cornflowerblue";
            document.getElementById('followButton').onclick = submitFollow;

        };
        submit_unfollow_action.call();
    }

    function deleteTweet(id) {
        const delete_action = async () => {
            var target_url = '/tweets/delete'
            const request = await fetch(target_url, {
                "method": "DELETE",
                "body": id,
            });
            if (request.status !== 200) {
                return
            }

            <!-- Modifiying display -->
            var to_remove = document.getElementById(id)
            to_remove.parentNode.removeChild(to_remove)

            var old_count = parseInt(document.getElementById("tweet_count").innerText)
            document.getElementById("tweet_count").innerText = (old_count - 1).toString()

        }
        delete_action.call(id)
    }

    function deleteProfile(id) {
        const delete_action = async () => {
            var target_url = "/users/delete"
            const request = await fetch(target_url, {
                method: "DELETE",
                body: id
            })

            if (request.redirected) {
                window.location = request.url;
            }
        }

        delete_action.call()
    }

</script>

<div class="py-5 h-50" style="background-color: #1DA1F2;">
    <div class="d-flex  m-3 justify-content-center align-items-center h-100">
        <div class="card " style="border-radius: 15px;">
            <div class="card-body p-4 text-black">
                <div>
                    <div class="row ml-1 mb-2">
                        <h5 class="mb-1 ml-1 align-self-center">@@@Model.User.Username</h5>
                    </div>
                    <div class="d-flex justify-content-start rounded-3 p-2 mb-2" style="background-color: #efefef;">
                        <div>
                            <p class="small text-muted mb-1">Tweets</p>
                            <p class="mb-0" id="tweet_count">@Model.Tweets.Count</p>
                        </div>
                        <div class="px-3">
                            <p class="small text-muted mb-1">Followers</p>
                            <p class="mb-0">@Model.NbFollowers</p>
                        </div>
                    </div>
                    <div class="d-flex pt-1 justify-content-center">
                        @if (Model.OwnProfile) {
                            <div class="col">
                                <button type="button" class="btn btn-danger" onclick="deleteProfile(@Model.User.Id)">
                                    Delete
                                    Account
                                </button>
                            </div>
                            @if (!Model.AlreadyFollows) {
                                <button type="button" class="btn btn-primary m-1" id="followButton"
                                        style="background-color: cornflowerblue" onclick="submitFollow()">
                                    Follow
                                </button>
                            }
                            else {
                                <button type="button" class="btn btn-primary m-1" id="followButton"
                                        style="background-color: red" onclick="submitUnfollow()">
                                    Unfollow
                                </button>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <ul class="list-group mt-3">
        <h5>Tweets</h5>
        @foreach (Tweet tweet in Model.Tweets) {
            <li class="list-group-item" id="{{tweet.id}}">
                <div class="flex-column">
                    <div>
                        <h5 class="fs-1"> @@@tweet.Author.Username</h5>
                        <p> Content: @tweet.Content </p>
                        @if (Model.OwnProfile) {
                            <button type="button" class="btn btn-danger m-1 float-right" id="deleteTweet"
                                    onclick="deleteTweet(@tweet.Id)">
                                Delete
                            </button>
                        }

                    </div>
                </div>
            </li>
        }

    </ul>

</div>